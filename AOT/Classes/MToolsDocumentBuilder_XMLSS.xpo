Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics Class: MToolsDocumentBuilder_XMLSS выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #MToolsDocumentBuilder_XMLSS
    Id 52041
    PROPERTIES
      Name                #MToolsDocumentBuilder_XMLSS
      Extends             #MToolsDocumentBuilder
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #autoFitRows
        #public void autoFitRows()
        #{
        #    COM sheet, cells, range;
        #    int i;
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    for (i = 1; i <= excelDocument.getWorkSheetsCount(); i++)
        #    {
        #        sheet = excelDocument.getWorkSheet(i);
        #        //BP deviation documented
        #        cells = sheet.cells();
        #        //BP deviation documented
        #        range = cells.entirerow();
        #        //BP deviation documented
        #        range.autofit();
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class MToolsDocumentBuilder_XMLSS extends MToolsDocumentBuilder
        #{
        #    boolean         expandNameBlocksToRowElement,
        #                    placeholderTypecast,
        #                    dataTypecast;
        #
        #    ComExcelDocument_RU excelDocument;
        #
        #    #define.rowElementStartTag('<Row')
        #    #define.rowElementEndTag('</Row>')
        #    #define.XMLFileExtension('.xml')
        #
        #    #Excel
        #
        #    //look XlEnableSelection Enumeration for possible _enableSelection values
        #    #define.xlNoSelection(-4142)
        #}
      ENDSOURCE
      SOURCE #defaultBlockNameLeftQuote
        #public str defaultBlockNameLeftQuote()
        #{
        #    return '<!--';
        #}
      ENDSOURCE
      SOURCE #defaultBlockNameRightQuote
        #public str defaultBlockNameRightQuote()
        #{
        #    return '-->';
        #}
      ENDSOURCE
      SOURCE #defaultDataTypecast
        #public boolean defaultDataTypecast()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultDocumentFileExtension
        #public str defaultDocumentFileExtension()
        #{
        #    return #XMLFileExtension;
        #}
      ENDSOURCE
      SOURCE #defaultEncoding
        #public CLRObject defaultEncoding()
        #{
        #    //BP deviation documented
        #    return new System.Text.UTF8Encoding(true);
        #}
      ENDSOURCE
      SOURCE #defaultExpandNameBlocksToRowElement
        #public int defaultExpandNameBlocksToRowElement()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #defaultPlaceholderTypecast
        #public boolean defaultPlaceholderTypecast()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #displayFullScreen
        #public void displayFullScreen(boolean _display)
        #{
        #    #define.xlNormal(-4143)
        #
        #    Com doc, app;
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    doc = excelDocument.getComDocument();
        #    //BP deviation documented
        #    app = doc.application();
        #    if (_display)
        #    {
        #        //BP deviation documented
        #        app.displayfullscreen(true);
        #    }
        #    else
        #    {
        #        //BP deviation documented
        #        app.windowState(#xlNormal);
        #    }
        #}
      ENDSOURCE
      SOURCE #displayGridLines
        #public void displayGridLines(boolean _display)
        #{
        #    Com doc, app, activeWindow;
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    doc = excelDocument.getComDocument();
        #    //BP deviation documented
        #    app = doc.application();
        #    //BP deviation documented
        #    activeWindow = app.activeWindow();
        #    //BP deviation documented
        #    activeWindow.displayGridLines(_display);
        #}
      ENDSOURCE
      SOURCE #expandBlocksToElement
        #protected container expandBlocksToElement(container _blocks, str _startTag, str _endTag)
        #{
        #    container ret;
        #    int i;
        #    int blockStart, blockEnd, elementStart, elementEnd;
        #    str blockName;
        #    int scanPos;
        #    int len = strlen(templateData);
        #;
        #    for (i = 1; i <= conlen(_blocks); i ++)
        #    {
        #        elementStart = 0;
        #        elementEnd   = 0;
        #        [blockStart, blockEnd, blockName] = conpeek(_blocks, i);
        #        scanPos = strscan(templateData, _startTag, blockStart - 1, - (blockStart - 1));
        #        if (!strscan(templateData, _endTag, blockStart - 1, - (blockStart - scanPos - strlen(_startTag))))
        #        {
        #            elementStart = scanPos;
        #        }
        #        scanPos = strscan(templateData, _endTag, blockEnd + 1, len - blockEnd - 1);
        #        if (!strscan(templateData, _startTag, blockEnd + 1,  scanPos - blockEnd - 1))
        #        {
        #            elementEnd = scanPos + strlen(_endTag) - 1;
        #        }
        #        if (elementStart && elementEnd)
        #        {
        #            ret += [[elementStart, elementEnd, blockName]];
        #        }
        #        else
        #        {
        #            ret += [[blockStart, blockEnd, blockName]];
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #findNameBlocks
        #protected container findNameBlocks()
        #{
        #    container ret;
        #;
        #    ret = super();
        #    if (expandNameBlocksToRowElement)
        #    {
        #        ret = this.expandBlocksToElement(ret, #rowElementStartTag, #rowElementEndTag);
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getComExcelDocument
        #public ComExcelDocument_RU getComExcelDocument()
        #{
        #    return excelDocument;
        #}
      ENDSOURCE
      SOURCE #new
        #void new(FileName _template, FileName _target = '')
        #{
        #;
        #    expandNameBlocksToRowElement = this.defaultExpandNameBlocksToRowElement();
        #    placeholderTypecast          = this.defaultPlaceholderTypecast();
        #    dataTypecast                 = this.defaultDataTypecast();
        #
        #    excelDocument = new ComExcelDocument_RU();
        #
        #    super(_template, _target);
        #}
      ENDSOURCE
      SOURCE #open
        #public void open()
        #{
        #;
        #    if (!isDocumentSaved)
        #    {
        #        this.saveDocumentFile();
        #    }
        #    if (excelDocument.open(target, false))
        #    {
        #        isDocumentOpen = true;
        #    }
        #    else
        #    {
        #        throw warning("@MTO1011");
        #    }
        #}
      ENDSOURCE
      SOURCE #parmDataTypecast
        #public boolean parmDataTypecast(boolean _dataTypecast = dataTypecast)
        #{
        #    if (_dataTypecast != dataTypecast) dataTypecast = _dataTypecast;
        #
        #    return dataTypecast;
        #}
      ENDSOURCE
      SOURCE #parmExpandNameBlocksToRowElement
        #public boolean parmExpandNameBlocksToRowElement(boolean _expandNameBlocksToRowElement = expandNameBlocksToRowElement)
        #{
        #    if (_expandNameBlocksToRowElement != expandNameBlocksToRowElement) expandNameBlocksToRowElement = _expandNameBlocksToRowElement;
        #
        #    return expandNameBlocksToRowElement;
        #}
      ENDSOURCE
      SOURCE #parmPlaceholderTypecast
        #public boolean parmPlaceholderTypecast(boolean _placeholderTypecast = placeholderTypecast)
        #{
        #    if (_placeholderTypecast != placeholderTypecast) placeholderTypecast = _placeholderTypecast;
        #
        #    return placeholderTypecast;
        #}
      ENDSOURCE
      SOURCE #prepareDataItem
        #protected str prepareDataItem(anytype _dataItem)
        #{
        #;
        #    if (dataTypecast)
        #    {
        #        return MToolsDocumentBuilder_XMLSS::any2StrXml(_dataItem);
        #    }
        #    return _dataItem;
        #}
      ENDSOURCE
      SOURCE #preparePlaceHolder
        #protected str preparePlaceHolder(anytype _placeHolder)
        #{
        #;
        #    if (placeholderTypecast)
        #    {
        #        return MToolsDocumentBuilder_XMLSS::any2StrXml(_placeHolder);
        #    }
        #    return _placeHolder;
        #}
      ENDSOURCE
      SOURCE #prepareTemplate
        #protected void prepareTemplate()
        #{
        #    #define.ExpandedRowCountPattern('ss\\:ExpandedRowCount=":d+"')
        #    #define.RowIndexPattern('\\<Row ss\\:Index=":d+"')
        #
        #    TextBuffer textBuffer = new TextBuffer();
        #    int scanPos;
        #;
        #    if (!templateData)
        #    {
        #        return;
        #    }
        #    textBuffer.setText(templateData);
        #    scanPos = 1;
        #    while (textBuffer.find(#ExpandedRowCountPattern, scanPos))
        #    {
        #        scanPos = textBuffer.matchPos();
        #        textBuffer.delete(textBuffer.matchPos(), textBuffer.matchLen());
        #    }
        #    scanPos = 1;
        #    while (textBuffer.find(#RowIndexPattern, scanPos))
        #    {
        #        scanPos = textBuffer.matchPos();
        #        textBuffer.delete(textBuffer.matchPos() + 4, textBuffer.matchLen() - 4);
        #    }
        #    templateData = textBuffer.getText();
        #}
      ENDSOURCE
      SOURCE #protectWorkbook
        #void protectWorkbook(int _worksheet = 0, boolean _randomPassword = true, str _password = '',
        #                     boolean _drawingObjects = true,           boolean _contents = true,
        #                     boolean _scenarios = true,                boolean _userInterfaceOnly = true,
        #                     boolean _allowFormattingCells = true,     boolean _allowFormattingColumns = true,
        #                     boolean _allowFormattingRows = true,      boolean _allowInsertingColumns = true,
        #                     boolean _allowInsertingRows = true,       boolean _allowInsertingHyperlinks = true,
        #                     boolean _allowDeletingColumns = true,     boolean _allowDeletingRows = true,
        #                     boolean _allowSorting = true,             boolean _allowFiltering = true,
        #                     boolean _allowUsingPivotTables = true)
        #{
        #    Com     doc, app, activeSheet, sheets;
        #    int     i, shFrom, shCount;
        #    str     password = _password;
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    doc = excelDocument.getComDocument();
        #    //BP deviation documented
        #    app = doc.application();
        #    //BP deviation documented
        #    sheets = app.sheets();
        #    if (!_worksheet)
        #    {
        #        shFrom = 1;
        #        //BP deviation documented
        #        shCount = sheets.count();
        #    }
        #    else
        #    {
        #        shFrom = _worksheet;
        #        shCount = 1;
        #    }
        #    if (_randomPassword)
        #    {
        #        password = guid2str(newguid());
        #    }
        #    for (i = shFrom; i <= shCount; i++)
        #    {
        #        //BP deviation documented
        #        activeSheet = sheets.Item(i);
        #        //BP deviation documented
        #        activeSheet.protect(
        #            password,
        #            _drawingObjects,
        #            _contents,
        #            _scenarios,
        #            _userInterfaceOnly,
        #            _allowFormattingCells,
        #            _allowFormattingColumns,
        #            _allowFormattingRows,
        #            _allowInsertingColumns,
        #            _allowInsertingRows,
        #            _allowInsertingHyperlinks,
        #            _allowDeletingColumns,
        #            _allowDeletingRows,
        #            _allowSorting,
        #            _allowFiltering,
        #            _allowUsingPivotTables
        #            );
        #    }
        #}
      ENDSOURCE
      SOURCE #save
        #public void save()
        #{
        #    Com doc;
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    doc = excelDocument.getComDocument();
        #    //BP deviation documented
        #    doc.save();
        #    isDocumentSaved = true;
        #}
      ENDSOURCE
      SOURCE #saveAs
        #public void saveAs(boolean _removeOriginal = true, FileName _fileName = '', int _fileFormat = #xlWorkbookNormal,
        #                   str _password = '', str _writeResPassword = '', boolean _readOnlyRecommended = false,
        #                   boolean _createBackup = false, int _accessMode = #xlNoChange, int _conflictResolution = #xlUserResolution,
        #                   boolean _addToMru = false)
        #{
        #    Com doc;
        #    str fileName = _fileName, path, name;
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    doc = excelDocument.getComDocument();
        #    if (!fileName)
        #    {
        #        [path, name] = filenamesplit(target);
        #        fileName = path + name;
        #    }
        #    //BP deviation documented
        #    doc.saveas(fileName, _fileFormat, _password, _writeResPassword, _readOnlyRecommended,
        #               _createBackup, _accessMode, _conflictResolution, _addToMru, 0, 0, false);
        #    if (_removeOriginal)
        #    {
        #        WinApi::deleteFile(target);
        #    }
        #    //BP deviation documented
        #    target = doc.fullName();
        #    isDocumentSaved = true;
        #}
      ENDSOURCE
      SOURCE #setDateStamp
        #public void setDateStamp(MToolsHeaderFooter _hf = MToolsHeaderFooter::RightHeader, boolean showTime = true)
        #{
        #    COM sheet, pageSetup;
        #    CompanyInfo companyInfo = CompanyInfo::find();
        #    str text;
        #    int i;
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    if (showTime)
        #    {
        #        text = strfmt('%1 - %2', time2str(timenow(), 1, 1), systemdateget());
        #    }
        #    else
        #    {
        #        text = strfmt('%1', systemdateget());
        #    }
        #    for (i = 1; i <= excelDocument.getWorkSheetsCount(); i++)
        #    {
        #        sheet = excelDocument.getWorkSheet(i);
        #        //BP deviation documented
        #        pageSetup = sheet.PageSetup();
        #        switch (_hf)
        #        {
        #            case MToolsHeaderFooter::LeftHeader:
        #                //BP deviation documented
        #                pageSetup.LeftHeader(text);
        #                break;
        #            case MToolsHeaderFooter::RightHeader:
        #                //BP deviation documented
        #                pageSetup.RightHeader(text);
        #                break;
        #            case MToolsHeaderFooter::LeftFooter:
        #                //BP deviation documented
        #                pageSetup.LeftFooter(text);
        #                break;
        #            case MToolsHeaderFooter::RightFooter:
        #                //BP deviation documented
        #                pageSetup.RightFooter(text);
        #                break;
        #            default:
        #                throw error(Error::wrongUseOfFunction(funcname()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #setHeaderFooter
        #public void setHeaderFooter()
        #{
        #    COM app, doc, sheet, pageSetup;
        #    CompanyInfo companyInfo = CompanyInfo::find();
        #    int i;
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    doc = excelDocument.getComDocument();
        #    //BP deviation documented
        #    app = doc.application();
        #
        #    this.setPageNumber();
        #    this.setDateStamp();
        #
        #    for (i = 1; i <= excelDocument.getWorkSheetsCount(); i++)
        #    {
        #        sheet = excelDocument.getWorkSheet(i);
        #        //BP deviation documented
        #        pageSetup = sheet.PageSetup();
        #        //BP deviation documented
        #        pageSetup.LeftHeader(companyInfo.Name);
        #        //BP deviation documented
        #        pageSetup.RightFooter("@MTO1012");
        #    }
        #}
      ENDSOURCE
      SOURCE #setPageNumber
        #public void setPageNumber(MToolsHeaderFooter _hf = MToolsHeaderFooter::LeftFooter)
        #{
        #    COM app, doc, sheet, pageSetup;
        #    CompanyInfo companyInfo = CompanyInfo::find();
        #    str ver;
        #    str text;
        #    int i;
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    doc = excelDocument.getComDocument();
        #    //BP deviation documented
        #    app = doc.application();
        #    //BP deviation documented
        #    ver = app.version();
        #    if (ver like '12*')
        #    {
        #        text = strfmt("@MTO1013", '&P', '&N');
        #    }
        #    else if (ver like '11*')
        #    {
        #        text = strfmt("@MTO1013", '&С', '&К');
        #    }
        #    else
        #    {
        #        text = strfmt("@MTO1014", ver);
        #    }
        #    for (i = 1; i <= excelDocument.getWorkSheetsCount(); i++)
        #    {
        #        sheet = excelDocument.getWorkSheet(i);
        #        //BP deviation documented
        #        pageSetup = sheet.PageSetup();
        #        switch (_hf)
        #        {
        #            case MToolsHeaderFooter::LeftHeader:
        #                //BP deviation documented
        #                pageSetup.LeftHeader(text);
        #                break;
        #            case MToolsHeaderFooter::RightHeader:
        #                //BP deviation documented
        #                pageSetup.RightHeader(text);
        #                break;
        #            case MToolsHeaderFooter::LeftFooter:
        #                //BP deviation documented
        #                pageSetup.LeftFooter(text);
        #                break;
        #            case MToolsHeaderFooter::RightFooter:
        #                //BP deviation documented
        #                pageSetup.RightFooter(text);
        #                break;
        #            default:
        #                throw error(Error::wrongUseOfFunction(funcname()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #setSelectionPermission
        #void setSelectionPermission(int _worksheet = 0, int _enableSelection = #xlNoSelection)
        #{
        #    Com     doc, app, activeSheet, sheets;
        #    int     i, shFrom, shCount;
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    doc = excelDocument.getComDocument();
        #    //BP deviation documented
        #    app = doc.application();
        #    //BP deviation documented
        #    sheets = app.sheets();
        #    if (!_worksheet)
        #    {
        #        shFrom = 1;
        #        //BP deviation documented
        #        shCount = sheets.count();
        #    }
        #    else
        #    {
        #        shFrom = _worksheet;
        #        shCount = 1;
        #    }
        #    for (i = shFrom; i <= shCount; i++)
        #    {
        #        //BP deviation documented
        #        activeSheet = sheets.Item(i);
        #        //BP deviation documented
        #        activeSheet.enableSelection(_enableSelection);
        #    }
        #}
      ENDSOURCE
      SOURCE #show
        #void show()
        #{
        #;
        #    if (!isDocumentOpen)
        #    {
        #        this.open();
        #    }
        #    excelDocument.visible(true);
        #}
      ENDSOURCE
      SOURCE #any2StrXml
        #public static str any2StrXml(anytype _data)
        #{
        #    #define.XmlNullDate("1901-01-01T00:00:00.000")
        #    #define.XmlNullTime("T00:00:00.000")
        #
        #    str ret;
        #;
        #    switch (typeof(_data))
        #    {
        #        case Types::String:
        #            ret = strrem(_data, '\n<>');
        #            break;
        #        case Types::Date:
        #            if (_data)
        #            {
        #                ret = date2str(_data, 321, 2, 3, 2, 3, 4);
        #                if (ret) ret += #XmlNullTime;
        #            }
        #            else
        #            {
        #                ret = #XmlNullDate;
        #            }
        #            break;
        #        case Types::Integer:
        #            ret = int2str(_data);
        #            break;
        #        case Types::Real:
        #            ret = num2str(_data, -1, -1, 1, 0);
        #            break;
        #        case Types::Enum:
        #            ret = enum2str(_data);
        #            break;
        #        default:
        #            throw error(strfmt("@MTO1015", typeof(_data)));
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #checkVBAObjectModelAccessEnabled
        #public static boolean checkVBAObjectModelAccessEnabled(boolean _verbose = false, boolean _showHelp = false)
        #{
        #    #WinApi
        #    #define.KeyName("AccessVBOM")
        #    #define.KeyPathExcel2007("Software\\Microsoft\\Office\\12.0\\Excel\\Security")
        #    #define.KeyPathExcel2003("Software\\Microsoft\\Office\\11.0\\Excel\\Security")
        #    #define.helpFileName("EnableVBAProjectAccess.htm")
        #
        #    int res;
        #    container buf;
        #    int keyValue;
        #    boolean ret = false;
        #;
        #    res = WinAPI::regOpenKey( #HKEY_CURRENT_USER, #KeyPathExcel2007, #KEY_READ);
        #    if (res)
        #    {
        #        buf = WinAPI::regGetValue(res, #KeyName);
        #        [keyValue] = buf;
        #        if (keyValue)
        #        {
        #            ret = true;
        #        }
        #    }
        #    if (!ret)
        #    {
        #        res = WinAPI::regOpenKey( #HKEY_CURRENT_USER, #KeyPathExcel2003, #KEY_READ);
        #        if (res)
        #        {
        #            buf = WinAPI::regGetValue(res, #KeyName);
        #            [keyValue] = buf;
        #            if (keyValue)
        #            {
        #                ret = true;
        #            }
        #        }
        #    }
        #    if (!ret)
        #    {
        #        if (_verbose)
        #        {
        #            warning("@MTO1016");
        #        }
        #        if (_verbose && _showHelp)
        #        {
        #            info("@MTO1017");
        #            WinApi::shellExecute(templatefolder_w() + #helpFileName);
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
